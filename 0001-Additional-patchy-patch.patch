From 3fa8764efdf04bd3bdff1bd9375ed516ef0dd84d Mon Sep 17 00:00:00 2001
From: Jordan Williams <jordan@jwillikers.com>
Date: Mon, 21 Oct 2024 11:55:17 -0500
Subject: [PATCH] Additional patchy patch

---
 Build.PL        |   5 +-
 META.yml        |   1 +
 Makefile.PL     |   4 +-
 README          |  45 ++--
 lib/Net/SNMP.pm | 632 ++++++++++++++++++++++++------------------------
 5 files changed, 344 insertions(+), 343 deletions(-)

diff --git a/Build.PL b/Build.PL
index 71d216e..230a1be 100644
--- a/Build.PL
+++ b/Build.PL
@@ -37,10 +37,11 @@ Module::Build->new(
    recommends         => {
       Crypt::DES      => '2.03',  # SNMPv3
       Digest::MD5     => '2.11',  # SNMPv3
+      Digest::SHA    => 0,  # SNMPv3
       Digest::SHA1    => '1.02',  # SNMPv3
       Digest::HMAC    => '1.00',  # SNMPv3
-      Crypt::Rijndael => '1.02',  # SNMPv3 - AES Cipher Algorithm 
-      Socket6         => '0.23',  # UDP/IPv6 or TCP/IPv6 Transport Domain 
+      Crypt::Rijndael => '1.02',  # SNMPv3 - AES Cipher Algorithm
+      Socket6         => '0.23',  # UDP/IPv6 or TCP/IPv6 Transport Domain
    },
    meta_merge         => {
       resources       => {
diff --git a/META.yml b/META.yml
index f260431..a1abe6f 100644
--- a/META.yml
+++ b/META.yml
@@ -63,6 +63,7 @@ recommends:
   Crypt::Rijndael: 1.02
   Digest::HMAC: 1.00
   Digest::MD5: 2.11
+  Digest::SHA: 0
   Digest::SHA1: 1.02
   Socket6: 0.23
 requires:
diff --git a/Makefile.PL b/Makefile.PL
index 4678c32..96fce91 100644
--- a/Makefile.PL
+++ b/Makefile.PL
@@ -15,7 +15,7 @@
 
 eval { require 5.006 } or die <<'EOD';
 
- This version of Net::SNMP uses syntax that is not supported 
+ This version of Net::SNMP uses syntax that is not supported
  in versions of Perl earlier than v5.6.0.
 
  Unable to install Net::SNMP with the current version of Perl.
@@ -40,6 +40,7 @@ WriteMakefile(
       Math::BigInt => 0,
       Crypt::DES   => '2.03',  # SNMPv3
       Digest::MD5  => '2.11',  # SNMPv3
+      Digest::SHA => 0,  # SNMPv3
       Digest::SHA1 => '1.02',  # SNMPv3
       Digest::HMAC => '1.00',  # SNMPv3
    },
@@ -55,4 +56,3 @@ WriteMakefile(
 exit 0;
 
 # ============================================================================
-
diff --git a/README b/README
index a88f79d..0b30041 100644
--- a/README
+++ b/README
@@ -1,33 +1,33 @@
 
-                       Net::SNMP, version 6.0.1 
+                       Net::SNMP, version 6.0.1
 
 NAME
 
-    Net::SNMP - Object oriented interface to SNMP 
+    Net::SNMP - Object oriented interface to SNMP
 
 DESCRIPTION
 
-    The Net::SNMP module implements an object oriented interface to the 
-    Simple Network Management Protocol.  Perl applications can use the  
-    module to retrieve or update information on a remote host using the 
-    SNMP protocol.  The module supports SNMP version-1, SNMP version-2c 
-    (Community-Based SNMPv2), and SNMP version-3.  The Net::SNMP module 
-    assumes that the user has a basic understanding of the Simple Network 
+    The Net::SNMP module implements an object oriented interface to the
+    Simple Network Management Protocol.  Perl applications can use the
+    module to retrieve or update information on a remote host using the
+    SNMP protocol.  The module supports SNMP version-1, SNMP version-2c
+    (Community-Based SNMPv2), and SNMP version-3.  The Net::SNMP module
+    assumes that the user has a basic understanding of the Simple Network
     Management Protocol and related network management concepts.
 
 INSTALLATION
 
     To install the Net::SNMP module and all of it's dependencies directly
-    from the Comprehensive Perl Archive Network (CPAN) execute the 
+    from the Comprehensive Perl Archive Network (CPAN) execute the
     command:
 
 	perl -MCPAN -e "install Net::SNMP"
 
     The Net::SNMP module can also be installed using the distribution file
-    downloaded from CPAN.  After unpacking the file, perform one of the 
+    downloaded from CPAN.  After unpacking the file, perform one of the
     following steps while in the top level directory of the distribution:
 
-        a.  Create a makefile by running Perl against Makefile.PL and 
+        a.  Create a makefile by running Perl against Makefile.PL and
             then run make:
 
                 perl Makefile.PL
@@ -43,34 +43,34 @@ INSTALLATION
                 perl Build test
                 perl Build install
 
-        c.  Copy or move the entire directory structure (including 
-            files) located under the lib/Net directory in the 
-            distribution into a directory named Net in a Perl library 
+        c.  Copy or move the entire directory structure (including
+            files) located under the lib/Net directory in the
+            distribution into a directory named Net in a Perl library
             directory.
 
 REQUIREMENTS
 
-    Net::SNMP uses syntax that is not supported in versions of Perl 
-    earlier than v5.6.0. 
+    Net::SNMP uses syntax that is not supported in versions of Perl
+    earlier than v5.6.0.
 
-    The non-core modules Crypt::DES, Digest::MD5, Digest::SHA1, and 
+    The non-core modules Crypt::DES, Digest::MD5, Digest::SHA1, Digest::SHA, and
     Digest::HMAC are needed to support SNMPv3.
 
-    In order to support the AES Cipher Algorithm as a SNMPv3 privacy 
+    In order to support the AES Cipher Algorithm as a SNMPv3 privacy
     protocol, the non-core module Crypt::Rijndael is needed.
 
-    To use UDP/IPv6 or TCP/IPv6 as a Transport Domain, the non-core 
+    To use UDP/IPv6 or TCP/IPv6 as a Transport Domain, the non-core
     module Socket6 is needed.
 
 DOCUMENTATION
 
-    Documentation is included as part of the Net::SNMP module in 
-    Plain Old Documentation (POD) format. 
+    Documentation is included as part of the Net::SNMP module in
+    Plain Old Documentation (POD) format.
 
 AUTHOR
 
     David M. Town <dtown@cpan.org>
-    
+
 LICENSE AND COPYRIGHT
 
     Copyright (c) 1998-2010 David M. Town.  All rights reserved.
@@ -82,4 +82,3 @@ LICENSE AND COPYRIGHT
 RCS
 
     $Id: README,v 6.1 2010/09/10 00:01:22 dtown Rel $
-
diff --git a/lib/Net/SNMP.pm b/lib/Net/SNMP.pm
index b0dfe22..5ee3dee 100644
--- a/lib/Net/SNMP.pm
+++ b/lib/Net/SNMP.pm
@@ -11,23 +11,23 @@ package Net::SNMP;
 # This program is free software; you may redistribute it and/or modify it
 # under the same terms as the Perl 5 programming language system itself.
 
-# Release 4.0.0 of the Net::SNMP module was dedicated to those who died in 
+# Release 4.0.0 of the Net::SNMP module was dedicated to those who died in
 # the September 11, 2001 terrorist attacks on the United States of America.
 
 # ============================================================================
 
 =head1 NAME
 
-Net::SNMP - Object oriented interface to SNMP 
+Net::SNMP - Object oriented interface to SNMP
 
 =head1 SYNOPSIS
 
-The Net::SNMP module implements an object oriented interface to the Simple 
-Network Management Protocol.  Perl applications can use the module to retrieve 
-or update information on a remote host using the SNMP protocol.  The module 
-supports SNMP version-1, SNMP version-2c (Community-Based SNMPv2), and SNMP 
+The Net::SNMP module implements an object oriented interface to the Simple
+Network Management Protocol.  Perl applications can use the module to retrieve
+or update information on a remote host using the SNMP protocol.  The module
+supports SNMP version-1, SNMP version-2c (Community-Based SNMPv2), and SNMP
 version-3. The Net::SNMP module assumes that the user has a basic understanding
-of the Simple Network Management Protocol and related network management 
+of the Simple Network Management Protocol and related network management
 concepts.
 
 =head1 DESCRIPTION
@@ -47,12 +47,12 @@ property because the flow of the code is stopped until the method returns.
 The optional named argument B<-nonblocking> can be passed to the object
 constructor with a true value to give the object "non-blocking" behavior.
 A method invoked by a non-blocking object queues the SNMP message and returns
-immediately, allowing the flow of the code to continue. The queued SNMP 
-messages are not sent until an event loop is entered by calling the 
-C<snmp_dispatcher()> method.  When the SNMP messages are sent, any response to 
-the messages invokes the subroutine defined by the user when the message was 
-originally queued. The event loop exits when all messages have been removed 
-from the queue by either receiving a response, or by exceeding the number of 
+immediately, allowing the flow of the code to continue. The queued SNMP
+messages are not sent until an event loop is entered by calling the
+C<snmp_dispatcher()> method.  When the SNMP messages are sent, any response to
+the messages invokes the subroutine defined by the user when the message was
+originally queued. The event loop exits when all messages have been removed
+from the queue by either receiving a response, or by exceeding the number of
 retries at the Transport Layer.
 
 =head2 Blocking Objects
@@ -75,7 +75,7 @@ This hash reference can also be retrieved using the C<var_bind_list()> method.
 =head2 Non-blocking Objects
 
 When a Net::SNMP object is created having non-blocking behavior, the invocation
-of a method associated with the object returns immediately, allowing the flow 
+of a method associated with the object returns immediately, allowing the flow
 of the code to continue.  When a method is invoked that would initiate a SNMP
 protocol exchange requiring a response, either a true value (i.e. 0x1) is
 returned immediately or the undefined value is returned if there was a failure.
@@ -83,12 +83,12 @@ The C<error()> method can be used to determine the cause of the failure.
 
 The contents of the VarBindList contained in the SNMP response message can be
 retrieved by calling the C<var_bind_list()> method using the object reference
-passed as the first argument to the callback.  The value returned by the 
+passed as the first argument to the callback.  The value returned by the
 C<var_bind_list()> method is a hash reference created using the ObjectName and
-the ObjectSyntax pairs in the VarBindList.  The keys of the hash consist of 
-the OBJECT IDENTIFIERs in dotted notation corresponding to each ObjectName 
+the ObjectSyntax pairs in the VarBindList.  The keys of the hash consist of
+the OBJECT IDENTIFIERs in dotted notation corresponding to each ObjectName
 in the VarBindList.  The value of each hash entry is set equal to the value of
-the corresponding ObjectSyntax. The undefined value is returned if there has 
+the corresponding ObjectSyntax. The undefined value is returned if there has
 been a failure and the C<error()> method may be used to determine the reason.
 
 =cut
@@ -123,7 +123,7 @@ use base qw( Exporter );
 our @EXPORT = qw(
    INTEGER INTEGER32 OCTET_STRING OBJECT_IDENTIFIER IPADDRESS COUNTER
    COUNTER32 GAUGE GAUGE32 UNSIGNED32 TIMETICKS OPAQUE COUNTER64 NOSUCHOBJECT
-   NOSUCHINSTANCE ENDOFMIBVIEW snmp_dispatcher 
+   NOSUCHINSTANCE ENDOFMIBVIEW snmp_dispatcher
 );
 
 our @EXPORT_OK = qw( oid_context_match );
@@ -145,7 +145,7 @@ our %EXPORT_TAGS = (
           EGP_NEIGHBOR_LOSS ENTERPRISE_SPECIFIC )
    ],
    snmp        => [
-      qw( SNMP_VERSION_1 SNMP_VERSION_2C SNMP_VERSION_3 SNMP_PORT 
+      qw( SNMP_VERSION_1 SNMP_VERSION_2C SNMP_VERSION_3 SNMP_PORT
           SNMP_TRAP_PORT snmp_debug snmp_dispatcher snmp_dispatch_once
           snmp_type_ntop oid_base_match oid_lex_cmp oid_lex_sort ticks_to_time )
    ],
@@ -173,7 +173,7 @@ sub DEBUG_SECURITY    { 0x20 }  # Security
 
 ## Package variables
 
-our $DEBUG = DEBUG_NONE;        # Debug mask 
+our $DEBUG = DEBUG_NONE;        # Debug mask
 
 our $DISPATCHER;                # Dispatcher instance
 
@@ -202,7 +202,7 @@ BEGIN
 
 =head1 METHODS
 
-When named arguments are expected by the methods, two different styles are 
+When named arguments are expected by the methods, two different styles are
 supported.  All examples in this documentation use the dashed-option style:
 
        $object->method(-argument => $value);
@@ -211,7 +211,7 @@ However, the IO:: style is also allowed:
 
        $object->method(Argument => $value);
 
-=over 
+=over
 
 =item Non-blocking Objects Arguments
 
@@ -231,11 +231,11 @@ a response to a SNMP message is received, an error condition has occurred, or
 the number of retries for the message has been exceeded.
 
 When the B<-callback> argument only contains a subroutine reference, the
-subroutine is evaluated passing a reference to the original Net::SNMP object 
+subroutine is evaluated passing a reference to the original Net::SNMP object
 as the only parameter.  If the B<-callback> argument was defined as an array
 reference, all elements in the array are passed to subroutine after the
 reference to the Net::SNMP object.  The first element, which is required to be
-a reference to a subroutine, is removed before the remaining arguments are 
+a reference to a subroutine, is removed before the remaining arguments are
 passed to that subroutine.
 
 Once one method is invoked with the B<-callback> argument, this argument stays
@@ -252,22 +252,22 @@ module.
 
 An optional argument B<-delay> can also be passed to non-blocking objects.  The
 B<-delay> argument instructs the object to wait the number of seconds passed
-to the argument before executing the SNMP protocol exchange.  The delay period 
-starts when the event loop is entered.  The B<-delay> parameter is applied to 
-all methods associated with the object once it is specified.  The delay value 
-must be set back to 0 seconds to disable the delay parameter. 
+to the argument before executing the SNMP protocol exchange.  The delay period
+starts when the event loop is entered.  The B<-delay> parameter is applied to
+all methods associated with the object once it is specified.  The delay value
+must be set back to 0 seconds to disable the delay parameter.
 
 =back
 
 =item SNMPv3 Arguments
 
-A SNMP context is a collection of management information accessible by a SNMP 
-entity.  An item of management information may exist in more than one context 
-and a SNMP entity potentially has access to many contexts.  The combination of 
-a contextEngineID and a contextName unambiguously identifies a context within 
-an administrative domain.  In a SNMPv3 message, the contextEngineID and 
-contextName are included as part of the scopedPDU.  All methods that generate 
-a SNMP message optionally take a B<-contextengineid> and B<-contextname> 
+A SNMP context is a collection of management information accessible by a SNMP
+entity.  An item of management information may exist in more than one context
+and a SNMP entity potentially has access to many contexts.  The combination of
+a contextEngineID and a contextName unambiguously identifies a context within
+an administrative domain.  In a SNMPv3 message, the contextEngineID and
+contextName are included as part of the scopedPDU.  All methods that generate
+a SNMP message optionally take a B<-contextengineid> and B<-contextname>
 argument to configure these fields.
 
 =over
@@ -275,18 +275,18 @@ argument to configure these fields.
 =item Context Engine ID
 
 The B<-contextengineid> argument expects a hexadecimal string representing
-the desired contextEngineID.  The string must be 10 to 64 characters (5 to 
-32 octets) long and can be prefixed with an optional "0x".  Once the 
-B<-contextengineid> is specified it stays with the object until it is changed 
-again or reset to default by passing in the undefined value.  By default, the 
+the desired contextEngineID.  The string must be 10 to 64 characters (5 to
+32 octets) long and can be prefixed with an optional "0x".  Once the
+B<-contextengineid> is specified it stays with the object until it is changed
+again or reset to default by passing in the undefined value.  By default, the
 contextEngineID is set to match the authoritativeEngineID of the authoritative
 SNMP engine.
 
 =item Context Name
 
-The contextName is passed as a string which must be 0 to 32 octets in length 
-using the B<-contextname> argument.  The contextName stays with the object 
-until it is changed.  The contextName defaults to an empty string which 
+The contextName is passed as a string which must be 0 to 32 octets in length
+using the B<-contextname> argument.  The contextName stays with the object
+until it is changed.  The contextName defaults to an empty string which
 represents the "default" context.
 
 =back
@@ -317,13 +317,13 @@ represents the "default" context.
            '_nonblocking'       =>  FALSE,           # [Non-]blocking flag
            '_pdu'               =>  undef,           # Message/PDU object
            '_security'          =>  undef,           # Security Model object
-           '_translate'         =>  TRANSLATE_ALL,   # Translation mask 
+           '_translate'         =>  TRANSLATE_ALL,   # Translation mask
            '_transport'         =>  undef,           # Transport Domain object
            '_transport_argv'    =>  [],              # Transport object argv
            '_version'           =>  SNMP_VERSION_1,  # SNMP version
       }, $class;
 
-      # Parse the passed arguments 
+      # Parse the passed arguments
 
       for (keys %argv) {
 
@@ -336,7 +336,7 @@ represents the "default" context.
          } elsif (/^-?version$/i) {
             $this->_version($argv{$_});
          } else {
-            # Pull out arguments associated with the Transport Domain. 
+            # Pull out arguments associated with the Transport Domain.
             my $key = $_;
             for (@trans_argv) {
                if ($key =~ /^-?$_$/i) {
@@ -391,7 +391,7 @@ sub open
    }
    $this->_error_clear();
 
-   # Keep a copy of the hostname 
+   # Keep a copy of the hostname
    $this->{_hostname} = $this->{_transport}->dest_hostname();
 
    # Perform SNMPv3 authoritative engine discovery.
@@ -429,16 +429,16 @@ sub open
 
 This is the constructor for Net::SNMP objects.  In scalar context, a
 reference to a new Net::SNMP object is returned if the creation of the object
-is successful.  In list context, a reference to a new Net::SNMP object and an 
-empty error message string is returned.  If a failure occurs, the object 
-reference is returned as the undefined value.  The error string may be used 
+is successful.  In list context, a reference to a new Net::SNMP object and an
+empty error message string is returned.  If a failure occurs, the object
+reference is returned as the undefined value.  The error string may be used
 to determine the cause of the error.
 
 Most of the named arguments passed to the constructor define basic attributes
 for the object and are not modifiable after the object has been created.  The
 B<-timeout>, B<-retries>, B<-maxmsgsize>, B<-translate>, and B<-debug>
-arguments are modifiable using an accessor method.  See their corresponding 
-method definitions for a complete description of their usage, default values, 
+arguments are modifiable using an accessor method.  See their corresponding
+method definitions for a complete description of their usage, default values,
 and valid ranges.
 
 =over
@@ -447,9 +447,9 @@ and valid ranges.
 
 The Net::SNMP module uses UDP/IPv4 as the default Transport Domain to exchange
 SNMP messages between the local and remote devices.  The module also supports
-UDP/IPv6, TCP/IPv4, and TCP/IPv6 as alternative Transport Domains.  The 
-B<-domain> argument can be used to change the Transport Domain by setting the 
-value to one of the following strings: 'udp6', 'udp/ipv6'; 'tcp', 'tcp4', 
+UDP/IPv6, TCP/IPv4, and TCP/IPv6 as alternative Transport Domains.  The
+B<-domain> argument can be used to change the Transport Domain by setting the
+value to one of the following strings: 'udp6', 'udp/ipv6'; 'tcp', 'tcp4',
 'tcp/ipv4'; 'tcp6', or 'tcp/ipv6'.  The B<-domain> argument also accepts
 the strings 'udp', 'udp4', or 'udp/ipv4' which correspond to the default
 Transport Domain of UDP/IPv4.
@@ -463,7 +463,7 @@ parentheses can optionally follow the service name.  This port number will
 be used if the service name cannot be resolved.  If the destination port number
 is not specified, the well-known SNMP port number 161 is used.
 
-By default the source transport address and port number are assigned 
+By default the source transport address and port number are assigned
 dynamically by the local device on which the Net::SNMP module is being used.
 This dynamic assignment can be overridden by using the B<-localaddr> and
 B<-localport> arguments.  These arguments accept the same values as the
@@ -473,14 +473,14 @@ correspond to a valid address of an interface on the local device.
 When using an IPv4 Transport Domain, the transport address can be specified
 as either an IP network hostname or an IPv4 address in standard dotted notation.
 The port information can be optionally appended to the hostname or address
-delimited by a colon.  The accepted IPv4 transport address formats are 
+delimited by a colon.  The accepted IPv4 transport address formats are
 C<address>, C<address:port>, C<hostname>, and C<hostname:port>.
 
 When using an IPv6 Transport Domain, the transport address can be specified
 as an IP hostname (which will be looked up as a DNS quad-A record) or an IPv6
-address in presentation format.  The port information can optionally be 
+address in presentation format.  The port information can optionally be
 included following a colon after the hostname or address.  When including this
-information after an IPv6 address, the address must be enclosed in square 
+information after an IPv6 address, the address must be enclosed in square
 brackets.  The scope zone index (described in RFC 4007) can be specified after
 the address as a decimal value delimited by a percent sign.  The accepted
 transport address formats for IPv6 are C<address>, C<address%zone>,
@@ -488,28 +488,28 @@ C<[address]:port>, C<[address%zone]:port>, C<hostname>, and C<hostname:port>.
 
 =item Security Model Arguments
 
-The B<-version> argument controls which other arguments are expected or 
-required by the C<session()> constructor.  The Net::SNMP module supports 
+The B<-version> argument controls which other arguments are expected or
+required by the C<session()> constructor.  The Net::SNMP module supports
 SNMPv1, SNMPv2c, and SNMPv3.  The module defaults to SNMPv1 if no B<-version>
-argument is specified.  The B<-version> argument expects either a digit (i.e. 
-'1', '2', or '3') or a string specifying the version (i.e. 'snmpv1', 
-'snmpv2c', or 'snmpv3') to define the SNMP version. 
+argument is specified.  The B<-version> argument expects either a digit (i.e.
+'1', '2', or '3') or a string specifying the version (i.e. 'snmpv1',
+'snmpv2c', or 'snmpv3') to define the SNMP version.
 
 The Security Model used by the Net::SNMP object is based on the SNMP version
 associated with the object.  If the SNMP version is SNMPv1 or SNMPv2c a
 Community-based Security Model will be used, while the User-based Security
-Model (USM) will be used if the version is SNMPv3.  
+Model (USM) will be used if the version is SNMPv3.
 
 =over
 
-=item Community-based Security Model Argument 
+=item Community-based Security Model Argument
 
 If the Security Model is Community-based, the only argument available is the
 B<-community> argument.  This argument expects a string that is to be used as
-the SNMP community name.  By default the community name is set to 'public' 
+the SNMP community name.  By default the community name is set to 'public'
 if the argument is not present.
 
-=item User-based Security Model Arguments 
+=item User-based Security Model Arguments
 
 The User-based Security Model (USM) used by SNMPv3 requires that a securityName
 be specified using the B<-username> argument.  The creation of a Net::SNMP
@@ -518,48 +518,48 @@ is not present.  The B<-username> argument expects a string 1 to 32 octets
 in length.
 
 Different levels of security are allowed by the User-based Security Model which
-address authentication and privacy concerns.  A SNMPv3 Net::SNMP object will 
-derive the security level (securityLevel) based on which of the following 
+address authentication and privacy concerns.  A SNMPv3 Net::SNMP object will
+derive the security level (securityLevel) based on which of the following
 arguments are specified.
 
-By default a securityLevel of 'noAuthNoPriv' is assumed.  If the B<-authkey> 
-or B<-authpassword> arguments are specified, the securityLevel becomes 
-'authNoPriv'.  The B<-authpassword> argument expects a string which is at 
-least 1 octet in length.  Optionally, the B<-authkey> argument can be used so 
-that a plain text password does not have to be specified in a script.  The 
-B<-authkey> argument expects a hexadecimal string produced by localizing the 
-password with the authoritativeEngineID for the specific destination device.  
-The C<snmpkey> utility included with the distribution can be used to create 
-the hexadecimal string (see L<snmpkey>). 
+By default a securityLevel of 'noAuthNoPriv' is assumed.  If the B<-authkey>
+or B<-authpassword> arguments are specified, the securityLevel becomes
+'authNoPriv'.  The B<-authpassword> argument expects a string which is at
+least 1 octet in length.  Optionally, the B<-authkey> argument can be used so
+that a plain text password does not have to be specified in a script.  The
+B<-authkey> argument expects a hexadecimal string produced by localizing the
+password with the authoritativeEngineID for the specific destination device.
+The C<snmpkey> utility included with the distribution can be used to create
+the hexadecimal string (see L<snmpkey>).
 
-Two different hash algorithms are defined by SNMPv3 which can be used by the 
-Security Model for authentication.  These algorithms are HMAC-MD5-96 "MD5" 
-(RFC 1321) and HMAC-SHA-96 "SHA-1" (NIST FIPS PUB 180-1).   The default 
-algorithm used by the module is HMAC-MD5-96.  This behavior can be changed by 
-using the B<-authprotocol> argument.  This argument expects either the string 
+Two different hash algorithms are defined by SNMPv3 which can be used by the
+Security Model for authentication.  These algorithms are HMAC-MD5-96 "MD5"
+(RFC 1321) and HMAC-SHA-96 "SHA-1" (NIST FIPS PUB 180-1).   The default
+algorithm used by the module is HMAC-MD5-96.  This behavior can be changed by
+using the B<-authprotocol> argument.  This argument expects either the string
 'md5' or 'sha' to be passed to modify the hash algorithm.
 
 By specifying the arguments B<-privkey> or B<-privpassword> the securityLevel
-associated with the object becomes 'authPriv'.  According to SNMPv3, privacy 
-requires the use of authentication.  Therefore, if either of these two 
-arguments are present and the B<-authkey> or B<-authpassword> arguments are 
-missing, the creation of the object fails.  The B<-privkey> and 
-B<-privpassword> arguments expect the same input as the B<-authkey> and 
+associated with the object becomes 'authPriv'.  According to SNMPv3, privacy
+requires the use of authentication.  Therefore, if either of these two
+arguments are present and the B<-authkey> or B<-authpassword> arguments are
+missing, the creation of the object fails.  The B<-privkey> and
+B<-privpassword> arguments expect the same input as the B<-authkey> and
 B<-authpassword> arguments respectively.
 
 The User-based Security Model described in RFC 3414 defines a single encryption
-protocol to be used for privacy.  This protocol, CBC-DES "DES" (NIST FIPS PUB 
-46-1), is used by default or if the string 'des' is passed to the 
+protocol to be used for privacy.  This protocol, CBC-DES "DES" (NIST FIPS PUB
+46-1), is used by default or if the string 'des' is passed to the
 B<-privprotocol> argument.  The module also supports RFC 3826 which describes
-the use of CFB128-AES-128 "AES" (NIST FIPS PUB 197) in the USM.  The AES 
-encryption protocol can be selected by passing 'aes' or 'aes128' to the 
+the use of CFB128-AES-128 "AES" (NIST FIPS PUB 197) in the USM.  The AES
+encryption protocol can be selected by passing 'aes' or 'aes128' to the
 B<-privprotocol> argument.  By working with the Extended Security Options
 Consortium L<http://www.snmp.com/protocol/eso.shtml>, the module also supports
 CBC-3DES-EDE "Triple-DES" (NIST FIPS 46-3) in the User-based Security Model.
 This is defined in the draft
 L<http://www.snmp.com/eso/draft-reeder-snmpv3-usm-3desede-00.txt>.  The
-Triple-DES encryption protocol can be selected using the B<-privprotocol> 
-argument with the string '3des' or '3desede'. 
+Triple-DES encryption protocol can be selected using the B<-privprotocol>
+argument with the string '3des' or '3desede'.
 
 =back
 
@@ -589,10 +589,10 @@ sub manager
 
 =head2 close() - clear the Transport Domain associated with the object
 
-   $session->close(); 
+   $session->close();
 
-This method clears the Transport Domain and any errors associated with the 
-object.  Once closed, the Net::SNMP object can no longer be used to send or 
+This method clears the Transport Domain and any errors associated with the
+object.  Once closed, the Net::SNMP object can no longer be used to send or
 receive SNMP messages.
 
 =cut
@@ -613,8 +613,8 @@ sub close
 
 This method enters the event loop associated with non-blocking Net::SNMP
 objects.  The method exits when all queued SNMP messages have received a
-response or have timed out at the Transport Layer. This method is also 
-exported as the stand alone function C<snmp_dispatcher()> by default 
+response or have timed out at the Transport Layer. This method is also
+exported as the stand alone function C<snmp_dispatcher()> by default
 (see L<"EXPORTS">).
 
 =cut
@@ -640,8 +640,8 @@ sub snmp_dispatch_once
 
    $result = $session->get_request(
                           [-callback        => sub {},]     # non-blocking
-                          [-delay           => $seconds,]   # non-blocking 
-                          [-contextengineid => $engine_id,] # v3 
+                          [-delay           => $seconds,]   # non-blocking
+                          [-contextengineid => $engine_id,] # v3
                           [-contextname     => $name,]      # v3
                           -varbindlist      => \@oids,
                        );
@@ -649,12 +649,12 @@ sub snmp_dispatch_once
 This method performs a SNMP get-request query to gather data from the remote
 agent on the host associated with the Net::SNMP object.  The message is built
 using the list of OBJECT IDENTIFIERs in dotted notation passed to the method
-as an array reference using the B<-varbindlist> argument.  Each OBJECT 
-IDENTIFIER is placed into a single SNMP GetRequest-PDU in the same order that 
+as an array reference using the B<-varbindlist> argument.  Each OBJECT
+IDENTIFIER is placed into a single SNMP GetRequest-PDU in the same order that
 it held in the original list.
 
 A reference to a hash is returned in blocking mode which contains the contents
-of the VarBindList.  In non-blocking mode, a true value is returned when no 
+of the VarBindList.  In non-blocking mode, a true value is returned when no
 error has occurred.  In either mode, the undefined value is returned when an
 error has occurred.  The C<error()> method may be used to determine the cause
 of the failure.
@@ -672,7 +672,7 @@ sub get_request
    if (!defined $this->_prepare_argv([qw( -callback
                                           -delay
                                           -contextengineid
-                                          -contextname 
+                                          -contextname
                                           -varbindlist     )], \@_, \@argv))
    {
       return $this->_error();
@@ -693,21 +693,21 @@ sub get_request
 
    $result = $session->get_next_request(
                           [-callback        => sub {},]     # non-blocking
-                          [-delay           => $seconds,]   # non-blocking 
-                          [-contextengineid => $engine_id,] # v3 
+                          [-delay           => $seconds,]   # non-blocking
+                          [-contextengineid => $engine_id,] # v3
                           [-contextname     => $name,]      # v3
                           -varbindlist      => \@oids,
                        );
 
-This method performs a SNMP get-next-request query to gather data from the 
-remote agent on the host associated with the Net::SNMP object.  The message 
-is built using the list of OBJECT IDENTIFIERs in dotted notation passed to the 
-method as an array reference using the B<-varbindlist> argument.  Each OBJECT 
-IDENTIFER is placed into a single SNMP GetNextRequest-PDU in the same order 
+This method performs a SNMP get-next-request query to gather data from the
+remote agent on the host associated with the Net::SNMP object.  The message
+is built using the list of OBJECT IDENTIFIERs in dotted notation passed to the
+method as an array reference using the B<-varbindlist> argument.  Each OBJECT
+IDENTIFER is placed into a single SNMP GetNextRequest-PDU in the same order
 that it held in the original list.
 
 A reference to a hash is returned in blocking mode which contains the contents
-of the VarBindList.  In non-blocking mode, a true value is returned when no 
+of the VarBindList.  In non-blocking mode, a true value is returned when no
 error has occurred.  In either mode, the undefined value is returned when an
 error has occurred.  The C<error()> method may be used to determine the cause
 of the failure.
@@ -725,7 +725,7 @@ sub get_next_request
    if (!defined $this->_prepare_argv([qw( -callback
                                           -delay
                                           -contextengineid
-                                          -contextname 
+                                          -contextname
                                           -varbindlist     )], \@_, \@argv))
    {
       return $this->_error();
@@ -746,21 +746,21 @@ sub get_next_request
 
    $result = $session->set_request(
                           [-callback        => sub {},]     # non-blocking
-                          [-delay           => $seconds,]   # non-blocking 
-                          [-contextengineid => $engine_id,] # v3 
+                          [-delay           => $seconds,]   # non-blocking
+                          [-contextengineid => $engine_id,] # v3
                           [-contextname     => $name,]      # v3
                           -varbindlist      => \@oid_value,
                        );
 
 This method is used to modify data on the remote agent that is associated
-with the Net::SNMP object using a SNMP set-request.  The message is built 
-using a list of values consisting of groups of an OBJECT IDENTIFIER, an object 
-type, and the actual value to be set.  This list is passed to the method as 
-an array reference using the B<-varbindlist> argument.  The OBJECT IDENTIFIERs 
-in each trio are to be in dotted notation.  The object type is an octet 
-corresponding to the ASN.1 type of value that is to be set.  Each of the 
-supported ASN.1 types have been defined and are exported by the package by 
-default (see L<"EXPORTS">). 
+with the Net::SNMP object using a SNMP set-request.  The message is built
+using a list of values consisting of groups of an OBJECT IDENTIFIER, an object
+type, and the actual value to be set.  This list is passed to the method as
+an array reference using the B<-varbindlist> argument.  The OBJECT IDENTIFIERs
+in each trio are to be in dotted notation.  The object type is an octet
+corresponding to the ASN.1 type of value that is to be set.  Each of the
+supported ASN.1 types have been defined and are exported by the package by
+default (see L<"EXPORTS">).
 
 A reference to a hash is returned in blocking mode which contains the contents
 of the VarBindList.  In non-blocking mode, a true value is returned when no
@@ -781,7 +781,7 @@ sub set_request
    if (!defined $this->_prepare_argv([qw( -callback
                                           -delay
                                           -contextengineid
-                                          -contextname 
+                                          -contextname
                                           -varbindlist     )], \@_, \@argv))
    {
       return $this->_error();
@@ -801,7 +801,7 @@ sub set_request
 =head2 trap() - send a SNMP trap to the remote manager
 
    $result = $session->trap(
-                          [-delay           => $seconds,]   # non-blocking 
+                          [-delay           => $seconds,]   # non-blocking
                           [-enterprise      => $oid,]
                           [-agentaddr       => $ipaddress,]
                           [-generictrap     => $generic,]
@@ -811,28 +811,28 @@ sub set_request
                        );
 
 This method sends a SNMP trap to the remote manager associated with the
-Net::SNMP object.  All arguments are optional and will be given the following 
-defaults in the absence of a corresponding named argument: 
+Net::SNMP object.  All arguments are optional and will be given the following
+defaults in the absence of a corresponding named argument:
 
-=over 
+=over
 
 =item *
 
-The default value for the trap B<-enterprise> is "1.3.6.1.4.1", which 
-corresponds to "iso.org.dod.internet.private.enterprises".  The enterprise 
-value is expected to be an OBJECT IDENTIFER in dotted notation. 
+The default value for the trap B<-enterprise> is "1.3.6.1.4.1", which
+corresponds to "iso.org.dod.internet.private.enterprises".  The enterprise
+value is expected to be an OBJECT IDENTIFER in dotted notation.
 
 =item *
 
 When the Transport Domain is UDP/IPv4 or TCP/IPv4, the default value for the
-trap B<-agentaddr> is the IP address associated with the interface on which 
+trap B<-agentaddr> is the IP address associated with the interface on which
 the trap will be transmitted.  For other Transport Domains the B<-agentaddr>
 is defaulted to "0.0.0.0".  When specified, the agent-addr is expected to be
 an IpAddress in dotted notation.
 
 =item *
 
-The default value for the B<-generictrap> type is 6 which corresponds to 
+The default value for the B<-generictrap> type is 6 which corresponds to
 "enterpriseSpecific".  The generic-trap types are defined and can be exported
 upon request (see L<"EXPORTS">).
 
@@ -843,31 +843,31 @@ are available for specific-trap types.
 
 =item *
 
-The default value for the trap B<-timestamp> is the "uptime" of the script.  
-The "uptime" of the script is the number of hundredths of seconds that have 
-elapsed since the script began running.  The time-stamp is expected to be a 
+The default value for the trap B<-timestamp> is the "uptime" of the script.
+The "uptime" of the script is the number of hundredths of seconds that have
+elapsed since the script began running.  The time-stamp is expected to be a
 TimeTicks number in hundredths of seconds.
 
 =item *
 
 The default value for the trap B<-varbindlist> is an empty array reference.
-The variable-bindings are expected to be in an array format consisting of 
-groups of an OBJECT IDENTIFIER, an object type, and the actual value of the 
+The variable-bindings are expected to be in an array format consisting of
+groups of an OBJECT IDENTIFIER, an object type, and the actual value of the
 object.  This is identical to the list expected by the C<set_request()> method.
-The OBJECT IDENTIFIERs in each trio are to be in dotted notation.  The object 
-type is an octet corresponding to the ASN.1 type for the value. Each of the 
-supported types have been defined and are exported by default (see 
+The OBJECT IDENTIFIERs in each trio are to be in dotted notation.  The object
+type is an octet corresponding to the ASN.1 type for the value. Each of the
+supported types have been defined and are exported by default (see
 L<"EXPORTS">).
 
 =back
 
-A true value is returned when the method is successful. The undefined value 
+A true value is returned when the method is successful. The undefined value
 is returned when a failure has occurred.  The C<error()> method can be used to
-determine the cause of the failure. Since there are no acknowledgements for 
+determine the cause of the failure. Since there are no acknowledgements for
 Trap-PDUs, there is no way to determine if the remote host actually received
-the trap.  
+the trap.
 
-B<NOTE:> When the object is in non-blocking mode, the trap is not sent until 
+B<NOTE:> When the object is in non-blocking mode, the trap is not sent until
 the event loop is entered and no callback is ever executed.
 
 B<NOTE:> This method can only be used when the version of the object is set to
@@ -911,8 +911,8 @@ sub trap
 
    $result = $session->get_bulk_request(
                           [-callback        => sub {},]     # non-blocking
-                          [-delay           => $seconds,]   # non-blocking 
-                          [-contextengineid => $engine_id,] # v3 
+                          [-delay           => $seconds,]   # non-blocking
+                          [-contextengineid => $engine_id,] # v3
                           [-contextname     => $name,]      # v3
                           [-nonrepeaters    => $non_reps,]
                           [-maxrepetitions  => $max_reps,]
@@ -920,16 +920,16 @@ sub trap
                        );
 
 This method performs a SNMP get-bulk-request query to gather data from the
-remote agent on the host associated with the Net::SNMP object.  All arguments 
-are optional except B<-varbindlist> and will be given the following defaults 
-in the absence of a corresponding named argument: 
+remote agent on the host associated with the Net::SNMP object.  All arguments
+are optional except B<-varbindlist> and will be given the following defaults
+in the absence of a corresponding named argument:
 
-=over 
+=over
 
 =item *
 
-The default value for the get-bulk-request B<-nonrepeaters> is 0.  The 
-non-repeaters value specifies the number of variables in the 
+The default value for the get-bulk-request B<-nonrepeaters> is 0.  The
+non-repeaters value specifies the number of variables in the
 variable-bindings list for which a single successor is to be returned.
 
 =item *
@@ -941,8 +941,8 @@ the remaining variables in the variable-bindings list.
 =item *
 
 The B<-varbindlist> argument expects an array reference consisting of a list of
-OBJECT IDENTIFIERs in dotted notation.  Each OBJECT IDENTIFER is placed into a 
-single SNMP GetBulkRequest-PDU in the same order that it held in the original 
+OBJECT IDENTIFIERs in dotted notation.  Each OBJECT IDENTIFER is placed into a
+single SNMP GetBulkRequest-PDU in the same order that it held in the original
 list.
 
 =back
@@ -970,8 +970,8 @@ sub get_bulk_request
                                           -delay
                                           -contextengineid
                                           -contextname
-                                          -nonrepeaters 
-                                          -maxrepetitions 
+                                          -nonrepeaters
+                                          -maxrepetitions
                                           -varbindlist     )], \@_, \@argv))
    {
       return $this->_error();
@@ -992,21 +992,21 @@ sub get_bulk_request
 
    $result = $session->inform_request(
                           [-callback        => sub {},]     # non-blocking
-                          [-delay           => $seconds,]   # non-blocking 
-                          [-contextengineid => $engine_id,] # v3 
+                          [-delay           => $seconds,]   # non-blocking
+                          [-contextengineid => $engine_id,] # v3
                           [-contextname     => $name,]      # v3
                           -varbindlist      => \@oid_value,
                        );
 
 This method is used to provide management information to the remote manager
-associated with the Net::SNMP object using an inform-request.  The message is 
-built using a list of values consisting of groups of an OBJECT IDENTIFIER, 
-an object type, and the actual value to be identified.  This list is passed 
-to the method as an array reference using the B<-varbindlist> argument.  The 
-OBJECT IDENTIFIERs in each trio are to be in dotted notation.  The object type 
-is an octet corresponding to the ASN.1 type of value that is to be identified.  
-Each of the supported ASN.1 types have been defined and are exported by the 
-package by default (see L<"EXPORTS">). 
+associated with the Net::SNMP object using an inform-request.  The message is
+built using a list of values consisting of groups of an OBJECT IDENTIFIER,
+an object type, and the actual value to be identified.  This list is passed
+to the method as an array reference using the B<-varbindlist> argument.  The
+OBJECT IDENTIFIERs in each trio are to be in dotted notation.  The object type
+is an octet corresponding to the ASN.1 type of value that is to be identified.
+Each of the supported ASN.1 types have been defined and are exported by the
+package by default (see L<"EXPORTS">).
 
 The first two variable-bindings fields in the inform-request are specified
 by SNMPv2 and should be:
@@ -1015,7 +1015,7 @@ by SNMPv2 and should be:
 
 =item *
 
-sysUpTime.0 - ('1.3.6.1.2.1.1.3.0', TIMETICKS, $timeticks) 
+sysUpTime.0 - ('1.3.6.1.2.1.1.3.0', TIMETICKS, $timeticks)
 
 =item *
 
@@ -1045,7 +1045,7 @@ sub inform_request
    if (!defined $this->_prepare_argv([qw( -callback
                                           -delay
                                           -contextengineid
-                                          -contextname 
+                                          -contextname
                                           -varbindlist     )], \@_, \@argv))
    {
       return $this->_error();
@@ -1065,18 +1065,18 @@ sub inform_request
 =head2 snmpv2_trap() - send a SNMP snmpV2-trap to the remote manager
 
    $result = $session->snmpv2_trap(
-                          [-delay           => $seconds,]   # non-blocking 
+                          [-delay           => $seconds,]   # non-blocking
                           -varbindlist      => \@oid_value,
                        );
 
-This method sends a snmpV2-trap to the remote manager associated with the 
-Net::SNMP object.  The message is built using a list of values consisting of 
-groups of an OBJECT IDENTIFIER, an object type, and the actual value to be 
-identified.  This list is passed to the method as an array reference using the 
-B<-varbindlist> argument.  The OBJECT IDENTIFIERs in each trio are to be in 
-dotted notation.  The object type is an octet corresponding to the ASN.1 type 
-of value that is to be identified.  Each of the supported ASN.1 types have 
-been defined and are exported by the package by default (see L<"EXPORTS">). 
+This method sends a snmpV2-trap to the remote manager associated with the
+Net::SNMP object.  The message is built using a list of values consisting of
+groups of an OBJECT IDENTIFIER, an object type, and the actual value to be
+identified.  This list is passed to the method as an array reference using the
+B<-varbindlist> argument.  The OBJECT IDENTIFIERs in each trio are to be in
+dotted notation.  The object type is an octet corresponding to the ASN.1 type
+of value that is to be identified.  Each of the supported ASN.1 types have
+been defined and are exported by the package by default (see L<"EXPORTS">).
 
 The first two variable-bindings fields in the snmpV2-trap are specified by
 SNMPv2 and should be:
@@ -1093,13 +1093,13 @@ snmpTrapOID.0 - ('1.3.6.1.6.3.1.1.4.1.0', OBJECT_IDENTIFIER, $oid)
 
 =back
 
-A true value is returned when the method is successful. The undefined value 
-is returned when a failure has occurred.  The C<error()> method can be used 
+A true value is returned when the method is successful. The undefined value
+is returned when a failure has occurred.  The C<error()> method can be used
 to determine the cause of the failure. Since there are no acknowledgements for
-SNMPv2-Trap-PDUs, there is no way to determine if the remote host actually 
-received the snmpV2-trap.  
+SNMPv2-Trap-PDUs, there is no way to determine if the remote host actually
+received the snmpV2-trap.
 
-B<NOTE:> When the object is in non-blocking mode, the snmpV2-trap is not sent 
+B<NOTE:> When the object is in non-blocking mode, the snmpV2-trap is not sent
 until the event loop is entered and no callback is ever executed.
 
 B<NOTE:> This method can only be used when the version of the object is set to
@@ -1142,25 +1142,25 @@ sub snmpv2_trap
 
    $result = $session->get_table(
                           [-callback        => sub {},]     # non-blocking
-                          [-delay           => $seconds,]   # non-blocking 
-                          [-contextengineid => $engine_id,] # v3 
+                          [-delay           => $seconds,]   # non-blocking
+                          [-contextengineid => $engine_id,] # v3
                           [-contextname     => $name,]      # v3
                           -baseoid          => $oid,
                           [-maxrepetitions  => $max_reps,]  # v2c/v3
                        );
 
-This method performs repeated SNMP get-next-request or get-bulk-request 
-(when using SNMPv2c or SNMPv3) queries to gather data from the remote agent 
-on the host associated with the Net::SNMP object.  The first message sent 
-is built using the OBJECT IDENTIFIER in dotted notation passed to the method 
-by the B<-baseoid> argument.   Repeated SNMP requests are issued until the 
-OBJECT IDENTIFIER in the response is no longer a child of the base OBJECT 
+This method performs repeated SNMP get-next-request or get-bulk-request
+(when using SNMPv2c or SNMPv3) queries to gather data from the remote agent
+on the host associated with the Net::SNMP object.  The first message sent
+is built using the OBJECT IDENTIFIER in dotted notation passed to the method
+by the B<-baseoid> argument.   Repeated SNMP requests are issued until the
+OBJECT IDENTIFIER in the response is no longer a child of the base OBJECT
 IDENTIFIER.
 
 The B<-maxrepetitions> argument can be used to specify the max-repetitions
-value that is passed to the get-bulk-requests when using SNMPv2c or SNMPv3.  
-If this argument is not present, a value is calculated based on the maximum 
-message size for the Net::SNMP object.  If the value is set to 1 or less, 
+value that is passed to the get-bulk-requests when using SNMPv2c or SNMPv3.
+If this argument is not present, a value is calculated based on the maximum
+message size for the Net::SNMP object.  If the value is set to 1 or less,
 get-next-requests will be used for the queries instead of get-bulk-requests.
 
 A reference to a hash is returned in blocking mode which contains the contents
@@ -1193,8 +1193,8 @@ sub get_table
    if (!defined $this->_prepare_argv([qw( -callback
                                           -delay
                                           -contextengineid
-                                          -contextname 
-                                          -baseoid         
+                                          -contextname
+                                          -baseoid
                                           -maxrepetitions  )], \@_, \@argv))
    {
       return $this->_error();
@@ -1293,9 +1293,9 @@ This method performs repeated SNMP get-next-request or get-bulk-request
 (when using SNMPv2c or SNMPv3) queries to gather data from the remote agent
 on the host associated with the Net::SNMP object.  Each message specifically
 requests data for each OBJECT IDENTIFIER specified in the B<-columns> array.
-The OBJECT IDENTIFIERs must correspond to column entries for a conceptual row 
+The OBJECT IDENTIFIERs must correspond to column entries for a conceptual row
 in a table.  They may however be columns in different tables as long as each
-table is indexed the same way.  The optional B<-startindex> and B<-endindex> 
+table is indexed the same way.  The optional B<-startindex> and B<-endindex>
 arguments may be specified to limit the query to specific rows in the table(s).
 
 The B<-startindex> can be specified as a single decimal value or in dotted
@@ -1307,17 +1307,17 @@ sub-identifier in the index is decremented by one.  If the last sub-identifier
 has a value of zero, the sub-identifier is removed from the index.
 
 The optional B<-endindex> argument can be specified as a single decimal value
-or in dotted notation.  If the B<-endindex> is specified, it will be included 
+or in dotted notation.  If the B<-endindex> is specified, it will be included
 as part of the query results.  If no B<-endindex> is specified, repeated SNMP
-requests are issued until the response no longer returns entries matching 
+requests are issued until the response no longer returns entries matching
 any of the columns specified in the B<-columns> array.
 
 The B<-maxrepetitions> argument can be used to specify the max-repetitions
 value that is passed to the get-bulk-requests when using SNMPv2c or SNMPv3.
 If this argument is not present, a value is calculated based on the maximum
 message size of the object and the number of columns specified in the
-B<-columns> array.  If the value is set to 1 or less, get-next-requests will 
-be used for the queries instead of get-bulk-requests. 
+B<-columns> array.  If the value is set to 1 or less, get-next-requests will
+be used for the queries instead of get-bulk-requests.
 
 A reference to a hash is returned in blocking mode which contains the contents
 of the VarBindList.  In non-blocking mode, a true value is returned when no
@@ -1335,7 +1335,7 @@ sub get_entries
 
    my @argv;
 
-   # Validate the passed arguments.  
+   # Validate the passed arguments.
 
    if (!defined $this->_prepare_argv([qw( -callback
                                           -delay
@@ -1344,8 +1344,8 @@ sub get_entries
                                           -entryoid
                                           -columns
                                           -startindex
-                                          -endindex  
-                                          -maxrepetitions       
+                                          -endindex
+                                          -maxrepetitions
                                           -rowcallback     )], \@_, \@argv))
    {
       return $this->_error();
@@ -1362,7 +1362,7 @@ sub get_entries
    # The syntax of get_entries() changes between release 4.1.0 and
    # release 4.1.1.  For backwards compatibility, we assume the old
    # syntax is being used if the "-entryoid" argument is present
-   # and we silently convert to the new syntax.  
+   # and we silently convert to the new syntax.
 
    if (defined $argv[0]) {
 
@@ -1410,7 +1410,7 @@ sub get_entries
 
    }
 
-   # Validate the column list. 
+   # Validate the column list.
 
    for (@{$argv[1]}) {
       if (!m/^\.?\d+(?:\.\d+)* *$/) {
@@ -1553,9 +1553,9 @@ sub get_entries
 
 This method returns the current value for the SNMP version associated with
 the object.  The returned value is the corresponding version number defined by
-the RFCs for the protocol version field (i.e. SNMPv1 == 0, SNMPv2c == 1, and 
-SNMPv3 == 3).  The RFC versions are defined as constant by the module and can 
-be exported by request (see L<"EXPORTS">). 
+the RFCs for the protocol version field (i.e. SNMPv1 == 0, SNMPv2c == 1, and
+SNMPv3 == 3).  The RFC versions are defined as constant by the module and can
+be exported by request (see L<"EXPORTS">).
 
 =cut
 
@@ -1602,7 +1602,7 @@ sub hostname
 
    $error_status = $session->error_status();
 
-This method returns the numeric value of the error-status contained in the 
+This method returns the numeric value of the error-status contained in the
 last SNMP message received by the object.
 
 =cut
@@ -1616,7 +1616,7 @@ sub error_status
 
    $error_index = $session->error_index();
 
-This method returns the numeric value of the error-index contained in the 
+This method returns the numeric value of the error-index contained in the
 last SNMP message received by the object.
 
 =cut
@@ -1626,17 +1626,17 @@ sub error_index
    return defined($_[0]->{_pdu}) ? $_[0]->{_pdu}->error_index() : 0;
 }
 
-=head2 var_bind_list() - get the hash reference for the VarBindList values 
+=head2 var_bind_list() - get the hash reference for the VarBindList values
 
    $values = $session->var_bind_list();
 
-This method returns a hash reference created using the ObjectName and the 
-ObjectSyntax pairs in the VarBindList of the last SNMP message received by 
+This method returns a hash reference created using the ObjectName and the
+ObjectSyntax pairs in the VarBindList of the last SNMP message received by
 the object.  The keys of the hash consist of the OBJECT IDENTIFIERs in dotted
-notation corresponding to each ObjectName in the VarBindList.  If any of the 
+notation corresponding to each ObjectName in the VarBindList.  If any of the
 OBJECT IDENTIFIERs passed to the request method began with a leading dot, all
-of the OBJECT IDENTIFIER hash keys will be prefixed with a leading dot.  If 
-duplicate OBJECT IDENTIFIERs are present in the VarBindList they will be 
+of the OBJECT IDENTIFIER hash keys will be prefixed with a leading dot.  If
+duplicate OBJECT IDENTIFIERs are present in the VarBindList they will be
 padded with spaces to make them an unique hash key.  The value of each hash
 entry is set equal to the value of the corresponding ObjectSyntax.  The
 undefined value is returned if there has been a failure.
@@ -1674,7 +1674,7 @@ sub var_bind_names
 
 This method returns a hash reference created using the ObjectName and the ASN.1
 type of the ObjectSyntax in the VarBindList of the last SNMP message received
-by the object.  The keys of the hash consist of the OBJECT IDENTIFIERs in 
+by the object.  The keys of the hash consist of the OBJECT IDENTIFIERs in
 dotted notation corresponding to each ObjectName in the VarBindList.  The
 value of each hash entry is set equal to the ASN.1 type of the corresponding
 ObjectSyntax.  Constants for the supported ASN.1 types have been defined and
@@ -1688,13 +1688,13 @@ sub var_bind_types
    return defined($_[0]->{_pdu}) ? $_[0]->{_pdu}->var_bind_types() : undef;
 }
 
-=head2 timeout() - set or get the current timeout period for the object 
+=head2 timeout() - set or get the current timeout period for the object
 
    $seconds = $session->timeout([$seconds]);
 
-This method returns the current value for the Transport Layer timeout for 
-the Net::SNMP object.  This value is the number of seconds that the object 
-will wait for a response from the agent on the remote host.  The default 
+This method returns the current value for the Transport Layer timeout for
+the Net::SNMP object.  This value is the number of seconds that the object
+will wait for a response from the agent on the remote host.  The default
 timeout is 5.0 seconds.
 
 If a parameter is specified, the timeout for the object is set to the provided
@@ -1729,7 +1729,7 @@ is 1.
 
 If a parameter is specified, the number of retries for the object is set to
 the provided value if it falls within the range 0 to 20. The undefined value
-is returned upon an error and the C<error()> method may be used to determine 
+is returned upon an error and the C<error()> method may be used to determine
 the cause.
 
 =cut
@@ -1753,20 +1753,20 @@ sub retries
 
    $octets = $session->max_msg_size([$octets]);
 
-This method returns the current value for the maximum message size 
+This method returns the current value for the maximum message size
 (maxMsgSize) for the Net::SNMP object.  This value is the largest message size
-in octets that can be prepared or processed by the object.  The default 
+in octets that can be prepared or processed by the object.  The default
 maxMsgSize is 1472 octets for UDP/IPv4, 1452 octets for UDP/IPv6, 1460 octets
 for TCP/IPv4, and 1440 octets for TCP/IPv6.
 
 If a parameter is specified, the maxMsgSize is set to the provided
-value if it falls within the range 484 to 65535 octets.  The undefined 
-value is returned upon an error and the C<error()> method may be used to 
+value if it falls within the range 484 to 65535 octets.  The undefined
+value is returned upon an error and the C<error()> method may be used to
 determine the cause.
 
 B<NOTE:> When using SNMPv3, the maxMsgSize is actually contained in the SNMP
-message (as msgMaxSize).  If the value received from a remote device is less 
-than the current maxMsgSize, the size is automatically adjusted to be the 
+message (as msgMaxSize).  If the value received from a remote device is less
+than the current maxMsgSize, the size is automatically adjusted to be the
 lower value.
 
 =cut
@@ -1793,26 +1793,26 @@ sub mtu
 
 =head2 translate() - enable or disable the translation mode for the object
 
-   $mask = $session->translate([ 
+   $mask = $session->translate([
                         $mode |
-                        [ # Perl anonymous ARRAY reference 
+                        [ # Perl anonymous ARRAY reference
                            ['-all'            => $mode0,]
                            ['-octetstring'    => $mode1,]
                            ['-null'           => $mode2,]
                            ['-timeticks'      => $mode3,]
                            ['-opaque'         => $mode4,]
-                           ['-nosuchobject'   => $mode5,] 
+                           ['-nosuchobject'   => $mode5,]
                            ['-nosuchinstance' => $mode6,]
                            ['-endofmibview'   => $mode7,]
-                           ['-unsigned'       => $mode8]  
+                           ['-unsigned'       => $mode8]
                         ]
                      ]);
 
-When the object decodes the GetResponse-PDU that is returned in response to 
-a SNMP message, certain values are translated into a more "human readable" 
-form.  By default the following translations occur: 
+When the object decodes the GetResponse-PDU that is returned in response to
+a SNMP message, certain values are translated into a more "human readable"
+form.  By default the following translations occur:
 
-=over 
+=over
 
 =item *
 
@@ -1838,7 +1838,7 @@ empty string.
 
 =item *
 
-noSuchInstance exception values return the string "noSuchInstance" instead of 
+noSuchInstance exception values return the string "noSuchInstance" instead of
 an empty string.
 
 =item *
@@ -1848,7 +1848,7 @@ empty string.
 
 =item *
 
-Counter64, Counter, Gauge, and TimeTick values that have been incorrectly 
+Counter64, Counter, Gauge, and TimeTick values that have been incorrectly
 encoded as signed negative values are returned as unsigned values.
 
 =back
@@ -1856,24 +1856,24 @@ encoded as signed negative values are returned as unsigned values.
 The C<translate()> method can be invoked with two different types of arguments.
 
 If the argument passed is any Perl variable type except an array reference,
-the translation mode for all ASN.1 types is set to either enabled or disabled, 
-depending on the value of the passed parameter.  Any value that Perl would 
-treat as a true value will set the mode to be enabled for all types, while a 
+the translation mode for all ASN.1 types is set to either enabled or disabled,
+depending on the value of the passed parameter.  Any value that Perl would
+treat as a true value will set the mode to be enabled for all types, while a
 false value will disable translation for all types.
 
 A reference to an array can be passed to the C<translate()> method in order to
 define the translation mode on a per ASN.1 type basis.  The array is expected
 to contain a list of named argument pairs for each ASN.1 type that is to
 be modified.  The arguments in the list are applied in the order that they
-are passed in via the array.  Arguments at the end of the list supercede 
+are passed in via the array.  Arguments at the end of the list supercede
 those passed earlier in the list.  The argument "-all" can be used to specify
-that the mode is to apply to all ASN.1 types.  Only the arguments for the 
+that the mode is to apply to all ASN.1 types.  Only the arguments for the
 ASN.1 types that are to be modified need to be included in the list.
 
 The C<translate()> method returns a bit mask indicating which ASN.1 types
 are to be translated.  Definitions of the bit to ASN.1 type mappings can be
-exported using the I<:translate> tag (see L<"EXPORTS">).  The undefined value 
-is returned upon an error and the C<error()> method may be used to determine 
+exported using the I<:translate> tag (see L<"EXPORTS">).  The undefined value
+is returned upon an error and the C<error()> method may be used to determine
 the cause.
 
 =cut
@@ -1935,33 +1935,33 @@ sub translate
    return $this->{_translate};
 }
 
-=head2 debug() - set or get the debug mode for the module 
+=head2 debug() - set or get the debug mode for the module
 
    $mask = $session->debug([$mask]);
 
-This method is used to enable or disable debugging for the Net::SNMP module. 
+This method is used to enable or disable debugging for the Net::SNMP module.
 Debugging can be enabled on a per component level as defined by a bit mask
 passed to the C<debug()> method.  The bit mask is broken up as follows:
 
 =over
 
-=item * 
+=item *
 
-0x02 - Message or PDU encoding and decoding 
+0x02 - Message or PDU encoding and decoding
 
-=item * 
+=item *
 
-0x04 - Transport Layer 
+0x04 - Transport Layer
 
-=item * 
+=item *
 
-0x08 - Dispatcher 
+0x08 - Dispatcher
 
-=item * 
+=item *
 
-0x10 - Message Processing  
+0x10 - Message Processing
 
-=item * 
+=item *
 
 0x20 - Security
 
@@ -1975,7 +1975,7 @@ resulting truth value.
 
 The current debugging mask is returned by the method.  Debugging can also be
 enabled using the stand alone function C<snmp_debug()>. This function can be
-exported by request (see L<"EXPORTS">). 
+exported by request (see L<"EXPORTS">).
 
 =cut
 
@@ -2025,15 +2025,15 @@ sub transport
 
 =head1 SUBROUTINES
 
-=head2 oid_base_match() - determine if an OID has a specified OID base 
+=head2 oid_base_match() - determine if an OID has a specified OID base
 
    $value = oid_base_match($base_oid, $oid);
 
 This function takes two OBJECT IDENTIFIERs in dotted notation and returns a
-true value (i.e. 0x1) if the second OBJECT IDENTIFIER is equal to or is a 
-child of the first OBJECT IDENTIFIER in the SNMP Management Information Base 
+true value (i.e. 0x1) if the second OBJECT IDENTIFIER is equal to or is a
+child of the first OBJECT IDENTIFIER in the SNMP Management Information Base
 (MIB).  This function can be used in conjunction with the C<get-next-request()>
-or C<get-bulk-request()> methods to determine when a OBJECT IDENTIFIER in the 
+or C<get-bulk-request()> methods to determine when a OBJECT IDENTIFIER in the
 GetResponse-PDU is no longer in the desired MIB tree branch.
 
 =cut
@@ -2072,7 +2072,7 @@ This function takes two OBJECT IDENTIFIERs in dotted notation and returns one
 of the values 1, 0, -1 if $oid1 is respectively lexicographically greater,
 equal, or less than $oid2.
 
-=cut 
+=cut
 
 sub oid_lex_cmp
 {
@@ -2134,9 +2134,9 @@ sub snmp_type_ntop
    $time = ticks_to_time($timeticks);
 
 This function takes an ASN.1 TimeTicks value and returns a string representing
-the time defined by the value.  The TimeTicks value is expected to be a 
-non-negative integer value representing the time in hundredths of a second 
-since some epoch.  The returned string will display the time in days, hours, 
+the time defined by the value.  The TimeTicks value is expected to be a
+non-negative integer value representing the time in hundredths of a second
+since some epoch.  The returned string will display the time in days, hours,
 and seconds format according to the value of the TimeTicks argument.
 
 =cut
@@ -2172,7 +2172,7 @@ sub _send_pdu
    my ($this) = @_;
 
    # Check to see if we are still in the process of discovering the
-   # authoritative SNMP engine.  If we are, queue the PDU if we are 
+   # authoritative SNMP engine.  If we are, queue the PDU if we are
    # running in non-blocking mode.
 
    if ($this->{_nonblocking} && !$this->{_security}->discovered()) {
@@ -2188,7 +2188,7 @@ sub _send_pdu
       snmp_dispatcher();
    }
 
-   # Return according to blocking mode 
+   # Return according to blocking mode
    return ($this->{_nonblocking}) ? TRUE : $this->var_bind_list();
 }
 
@@ -2264,11 +2264,11 @@ sub _create_pdu
    {
       my ($this, $allowed, $named, $unnamed) = @_;
 
-      # XXX: Argument $unnamed is updated by reference. 
+      # XXX: Argument $unnamed is updated by reference.
 
       my %argv;
 
-      # For backwards compatibility, check to see if the first 
+      # For backwards compatibility, check to see if the first
       # argument is an OBJECT IDENTIFIER in dotted notation.  If it
       # is, assign it to the -varbindlist argument.
 
@@ -2279,8 +2279,8 @@ sub _create_pdu
       }
 
       # Go through the passed argument list and see if the argument is
-      # allowed.  If it is, see if it applies to the object and has a 
-      # matching method call or add it the the new argv list to be 
+      # allowed.  If it is, see if it applies to the object and has a
+      # matching method call or add it the the new argv list to be
       # returned by this method.
 
       my %new_args;
@@ -2300,7 +2300,7 @@ sub _create_pdu
          }
       }
 
-      # Create a new ordered unnamed argument list based on the allowed 
+      # Create a new ordered unnamed argument list based on the allowed
       # list passed, ignoring those that applied to the object.
 
       for (@{$allowed}) {
@@ -2317,9 +2317,9 @@ sub _callback
 {
    my ($this, $callback) = @_;
 
-   # We validate the callback argument and then create an anonymous 
-   # array where the first element is the subroutine reference and 
-   # the second element is an array reference containing arguments 
+   # We validate the callback argument and then create an anonymous
+   # array where the first element is the subroutine reference and
+   # the second element is an array reference containing arguments
    # to pass to the subroutine.
 
    if (!$this->{_nonblocking}) {
@@ -2350,9 +2350,9 @@ sub _callback_closure
 
    # When a response message is received, the Dispatcher will create
    # a new PDU object and assign the callback to that object.  The
-   # callback is then executed passing a reference to the PDU object 
-   # as the first argument.  We use a closure to assign that passed 
-   # reference to the Net:SNMP object and then invoke the user defined 
+   # callback is then executed passing a reference to the PDU object
+   # as the first argument.  We use a closure to assign that passed
+   # reference to the Net:SNMP object and then invoke the user defined
    # callback.
 
    if (!$this->{_nonblocking} || !defined $this->{_callback}) {
@@ -2476,7 +2476,7 @@ sub _object_type_validate
    # Since both non-blocking and blocking objects use the same
    # Dispatcher instance, allowing both objects types to exist at
    # the same time would cause problems.  This method is called
-   # by the constructor to track the object counts based on the 
+   # by the constructor to track the object counts based on the
    # non-blocking property and returns an error if the two types
    # would exist at the same time.
 
@@ -2545,9 +2545,9 @@ sub _discovery_engine_id_cb
 {
    my ($this) = @_;
 
-   # "The response to this message will be a Report message containing 
-   # the snmpEngineID of the authoritative SNMP engine...  ...with the 
-   # usmStatsUnknownEngineIDs counter in the varBindList."  If another 
+   # "The response to this message will be a Report message containing
+   # the snmpEngineID of the authoritative SNMP engine...  ...with the
+   # usmStatsUnknownEngineIDs counter in the varBindList."  If another
    # error is returned, we assume snmpEngineID discovery has failed.
 
    if ($this->{_error} !~ /usmStatsUnknownEngineIDs/) {
@@ -2611,10 +2611,10 @@ sub _discovery_synchronization_cb
 {
    my ($this) = @_;
 
-   # "The response... ...will be a Report message containing the up 
-   # to date values of the authoritative SNMP engine's snmpEngineBoots 
+   # "The response... ...will be a Report message containing the up
+   # to date values of the authoritative SNMP engine's snmpEngineBoots
    # and snmpEngineTime...  It also contains the usmStatsNotInTimeWindows
-   # counter in the varBindList..."  If another error is returned, we 
+   # counter in the varBindList..."  If another error is returned, we
    # assume that the synchronization has failed.
 
    if (($this->{_security}->discovered()) &&
@@ -2625,7 +2625,7 @@ sub _discovery_synchronization_cb
       return $this->_discovery_complete();
    }
 
-   # If we received the usmStatsNotInTimeWindows report or no error, but 
+   # If we received the usmStatsNotInTimeWindows report or no error, but
    # we are still not synchronized, provide a generic error message.
 
    if ((!$this->{_error}) || ($this->{_error} =~ /usmStatsNotInTimeWindows/)) {
@@ -2732,7 +2732,7 @@ sub _get_table_cb
       if (!oid_base_match($argv->{base_oid}, $next) ||
           ($types->{$next} == ENDOFMIBVIEW))
       {
-         $next = undef; # End of table. 
+         $next = undef; # End of table.
          last;
       }
 
@@ -3113,7 +3113,7 @@ sub require_version
 
    # Provide our own method for handling x.y.z version checks and the return
    # value of VERISON() in older implementations of Perl.  V-string versions
-   # in Perl 5.10.0 are now treated as version objects and handled properly. 
+   # in Perl 5.10.0 are now treated as version objects and handled properly.
 
    if (@argv > 0) {
       my $wanted = $argv[0];
@@ -3156,7 +3156,7 @@ __END__
 
 =head1 EXPORTS
 
-The Net::SNMP module uses the F<Exporter> module to export useful constants 
+The Net::SNMP module uses the F<Exporter> module to export useful constants
 and subroutines.  These exportable symbols are defined below and follow the
 rules and conventions of the F<Exporter> module (see L<Exporter>).
 
@@ -3164,9 +3164,9 @@ rules and conventions of the F<Exporter> module (see L<Exporter>).
 
 =item Default
 
-&snmp_dispatcher, INTEGER, INTEGER32, OCTET_STRING, OBJECT_IDENTIFIER, 
-IPADDRESS, COUNTER, COUNTER32, GAUGE, GAUGE32, UNSIGNED32, TIMETICKS, 
-OPAQUE, COUNTER64, NOSUCHOBJECT, NOSUCHINSTANCE, ENDOFMIBVIEW 
+&snmp_dispatcher, INTEGER, INTEGER32, OCTET_STRING, OBJECT_IDENTIFIER,
+IPADDRESS, COUNTER, COUNTER32, GAUGE, GAUGE32, UNSIGNED32, TIMETICKS,
+OPAQUE, COUNTER64, NOSUCHOBJECT, NOSUCHINSTANCE, ENDOFMIBVIEW
 
 =item Exportable
 
@@ -3186,19 +3186,19 @@ TRANSLATE_ENDOFMIBVIEW, TRANSLATE_UNSIGNED, TRANSLATE_ALL
 
 =item Tags
 
-=over 
+=over
 
 =item :asn1
 
-INTEGER, INTEGER32, OCTET_STRING, NULL, OBJECT_IDENTIFIER, SEQUENCE, 
-IPADDRESS, COUNTER, COUNTER32, GAUGE, GAUGE32, UNSIGNED32, TIMETICKS, OPAQUE, 
-COUNTER64, NOSUCHOBJECT, NOSUCHINSTANCE, ENDOFMIBVIEW, GET_REQUEST, 
-GET_NEXT_REQUEST, GET_RESPONSE, SET_REQUEST, TRAP, GET_BULK_REQUEST, 
+INTEGER, INTEGER32, OCTET_STRING, NULL, OBJECT_IDENTIFIER, SEQUENCE,
+IPADDRESS, COUNTER, COUNTER32, GAUGE, GAUGE32, UNSIGNED32, TIMETICKS, OPAQUE,
+COUNTER64, NOSUCHOBJECT, NOSUCHINSTANCE, ENDOFMIBVIEW, GET_REQUEST,
+GET_NEXT_REQUEST, GET_RESPONSE, SET_REQUEST, TRAP, GET_BULK_REQUEST,
 INFORM_REQUEST, SNMPV2_TRAP, REPORT
 
 =item :debug
 
-&snmp_debug, DEBUG_ALL, DEBUG_NONE, DEBUG_MESSAGE, DEBUG_TRANSPORT, 
+&snmp_debug, DEBUG_ALL, DEBUG_NONE, DEBUG_MESSAGE, DEBUG_TRANSPORT,
 DEBUG_DISPATCHER, DEBUG_PROCESSING, DEBUG_SECURITY
 
 =item :generictrap
@@ -3215,7 +3215,7 @@ SNMP_PORT, SNMP_TRAP_PORT
 =item :translate
 
 TRANSLATE_NONE, TRANSLATE_OCTET_STRING, TRANSLATE_NULL, TRANSLATE_TIMETICKS,
-TRANSLATE_OPAQUE, TRANSLATE_NOSUCHOBJECT, TRANSLATE_NOSUCHINSTANCE, 
+TRANSLATE_OPAQUE, TRANSLATE_NOSUCHOBJECT, TRANSLATE_NOSUCHINSTANCE,
 TRANSLATE_ENDOFMIBVIEW, TRANSLATE_UNSIGNED, TRANSLATE_ALL
 
 =item :ALL
@@ -3268,7 +3268,7 @@ This example gets the sysUpTime from a remote host.
 
 =head2 2. Blocking SNMPv3 set-request of sysContact
 
-This example sets the sysContact information on the remote host to 
+This example sets the sysContact information on the remote host to
 "Help Desk x911".  The named arguments passed to the C<session()> constructor
 are for the demonstration of syntax only.  These parameters will need to be
 set according to the SNMPv3 parameters of the remote host.  The C<snmpkey>
@@ -3318,7 +3318,7 @@ utility included with the distribution can be used to create the key values.
 =head2 3. Non-blocking SNMPv2c get-bulk-request for ifTable
 
 This example gets the contents of the ifTable by sending get-bulk-requests
-until the responses are no longer part of the ifTable.  The ifTable can also 
+until the responses are no longer part of the ifTable.  The ifTable can also
 be retrieved using the C<get_table()> method.  The ifPhysAddress object in
 the table has a syntax of an OCTET STRING.  By default, translation is enabled
 and non-printable OCTET STRINGs are translated into a hexadecimal format.
@@ -3545,13 +3545,13 @@ the sysLocation information is passed as an argument to the callback.
 
 =item *
 
-The Net::SNMP module uses syntax that is not supported in versions of Perl 
-earlier than v5.6.0. 
+The Net::SNMP module uses syntax that is not supported in versions of Perl
+earlier than v5.6.0.
 
 =item *
 
-The non-core modules F<Crypt::DES>, F<Digest::MD5>, F<Digest::SHA1>, and 
-F<Digest::HMAC> are required to support SNMPv3. 
+The non-core modules F<Crypt::DES>, F<Digest::MD5>, F<Digest::SHA1>, F<Digest::SHA>, and
+F<Digest::HMAC> are required to support SNMPv3.
 
 =item *
 
@@ -3560,7 +3560,7 @@ non-core module F<Crypt::Rijndael> is needed.
 
 =item *
 
-To use UDP/IPv6 or TCP/IPv6 as a Transport Domain, the non-core module 
+To use UDP/IPv6 or TCP/IPv6 as a Transport Domain, the non-core module
 F<Socket6> is needed.
 
 =back
@@ -3571,20 +3571,20 @@ David M. Town E<lt>dtown@cpan.orgE<gt>
 
 =head1 ACKNOWLEDGMENTS
 
-The original concept for this module was based on F<SNMP_Session.pm> 
+The original concept for this module was based on F<SNMP_Session.pm>
 written by Simon Leinen E<lt>simon@switch.chE<gt>.
 
-The Abstract Syntax Notation One (ASN.1) encode and decode methods were 
-originally derived by example from the CMU SNMP package whose copyright 
-follows: Copyright (c) 1988, 1989, 1991, 1992 by Carnegie Mellon University. 
-All rights reserved. 
+The Abstract Syntax Notation One (ASN.1) encode and decode methods were
+originally derived by example from the CMU SNMP package whose copyright
+follows: Copyright (c) 1988, 1989, 1991, 1992 by Carnegie Mellon University.
+All rights reserved.
 
 =head1 LICENSE AND COPYRIGHT
 
 Copyright (c) 1998-2010 David M. Town.  All rights reserved.
 
 This program is free software; you may redistribute it and/or modify it under
-the same terms as the Perl 5 programming language system itself. 
+the same terms as the Perl 5 programming language system itself.
 
 =cut
 
-- 
2.47.0

